# Cloud-init for ${project_name} ${environment} server
# 1. 패키지 관리 설정
package_update: true
package_upgrade: true

# 2. 패키지 목록
packages:
  - docker.io
  - git
  - curl
  - wget
  - unzip
  - htop
  - vim
  - python3
  - python3-pip
  - python3-venv
  - certbot

# 3. 파일 생성
write_files:
  # Docker 로그인 헬퍼 스크립트
  - path: /home/ubuntu/docker-login.sh
    permissions: '0755'
    owner: root:root
    content: |
      #!/bin/bash
      # Oracle Container Registry 로그인 스크립트
      set -e
      if [ "$#" -ne 4 ]; then
          echo "Usage: $0 <region> <tenancy-namespace> <username> <auth-token>"
          echo "Example: $0 ap-chuncheon-1 mytenancy myuser mytoken"
          exit 1
      fi
      
      REGION=$1
      TENANCY_NAMESPACE=$2
      USERNAME=$3
      AUTH_TOKEN=$4
      
      echo "Logging into Oracle Container Registry..."
      echo "$AUTH_TOKEN" | docker login $REGION.ocir.io -u $TENANCY_NAMESPACE/$USERNAME --password-stdin
      
      if [ $? -eq 0 ]; then
          echo "✅ Successfully logged into $REGION.ocir.io"
      else
          echo "❌ Failed to log into Oracle Container Registry"
          exit 1
      fi

  # Let's Encrypt 인증서 자동 발급 및 갱신 스크립트
  - path: /usr/local/sbin/setup-letsencrypt.sh
    permissions: '0755'
    owner: root:root
    content: |
      #!/bin/bash
      set -e
      
      DOMAIN="www.junhyung.xyz"
      CERT_DIR="/opt/letsencrypt"
      EMAIL="admin@junhyung.xyz"
      
      echo "--- 📜 Let's Encrypt 인증서 설정 시작 ---"
      
      # 인증서 저장 디렉터리 생성
      mkdir -p $CERT_DIR
      
      # 도메인이 이 서버를 가리키는지 확인
      echo "🔍 도메인 DNS 확인 중..."
      CURRENT_IP=$(curl -s ifconfig.me || curl -s ipinfo.io/ip)
      DOMAIN_IP=$(dig +short $DOMAIN | tail -n1)
      
      echo "현재 서버 IP: $CURRENT_IP"
      echo "도메인($DOMAIN) IP: $DOMAIN_IP"
      
      if [ "$CURRENT_IP" != "$DOMAIN_IP" ]; then
          echo "⚠️ 경고: 도메인이 아직 이 서버를 가리키지 않습니다."
          echo "DNS 전파를 기다리는 중... (최대 10분)"
          for i in {1..60}; do
              sleep 10
              DOMAIN_IP=$(dig +short $DOMAIN | tail -n1)
              if [ "$CURRENT_IP" = "$DOMAIN_IP" ]; then
                  echo "✅ DNS 전파 완료!"
                  break
              fi
              echo "대기 중... ($i/60)"
          done
      fi
      
      # Let's Encrypt 인증서 발급 (웹루트 방식 사용)
      echo "🔒 Let's Encrypt 인증서 발급 중..."
      certbot certonly \
          --webroot \
          --webroot-path /opt/chat-service/webroot \
          --non-interactive \
          --agree-tos \
          --email $EMAIL \
          --domains $DOMAIN \
          --no-eff-email
      
      # 발급된 인증서를 /opt/letsencrypt로 복사
      if [ -d "/etc/letsencrypt/live/$DOMAIN" ]; then
          echo "📋 인증서 복사 중..."
          cp "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" "$CERT_DIR/cert.pem"
          cp "/etc/letsencrypt/live/$DOMAIN/privkey.pem" "$CERT_DIR/privkey.pem"
          cp "/etc/letsencrypt/live/$DOMAIN/chain.pem" "$CERT_DIR/chain.pem" 2>/dev/null || echo "체인 파일 없음"
          
          # 권한 설정
          chown -R ubuntu:ubuntu $CERT_DIR
          chmod 600 $CERT_DIR/privkey.pem
          chmod 644 $CERT_DIR/cert.pem $CERT_DIR/chain.pem 2>/dev/null || true
          
          echo "✅ 인증서가 $CERT_DIR 에 저장되었습니다."
          
          # 인증서 정보 출력
          echo "📊 인증서 정보:"
          openssl x509 -in $CERT_DIR/cert.pem -text -noout | grep -E "(Subject:|Not Before|Not After)"
      else
          echo "❌ 인증서 발급 실패"
          exit 1
      fi
      
      # 자동 갱신 설정 (crontab)
      echo "⏰ 자동 갱신 설정 중..."
      (crontab -l 2>/dev/null; echo "0 2 * * 0 /usr/bin/certbot renew --quiet --webroot --webroot-path /opt/chat-service/webroot && /usr/local/sbin/update-lb-cert.sh") | crontab -
      
      echo "🎉 Let's Encrypt 설정 완료!"

  # 로드 밸런서 인증서 업데이트 스크립트
  - path: /usr/local/sbin/update-lb-cert.sh
    permissions: '0755'
    owner: root:root
    content: |
      #!/bin/bash
      set -e
      
      DOMAIN="www.junhyung.xyz"
      CERT_DIR="/opt/letsencrypt"
      
      echo "--- 🔄 로드 밸런서 인증서 업데이트 ---"
      
      # 새로운 인증서가 있는지 확인
      if [ -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]; then
          # 인증서 복사
          cp "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" "$CERT_DIR/cert.pem"
          cp "/etc/letsencrypt/live/$DOMAIN/privkey.pem" "$CERT_DIR/privkey.pem"
          cp "/etc/letsencrypt/live/$DOMAIN/chain.pem" "$CERT_DIR/chain.pem" 2>/dev/null || true
          
          # 권한 설정
          chown -R ubuntu:ubuntu $CERT_DIR
          chmod 600 $CERT_DIR/privkey.pem
          chmod 644 $CERT_DIR/cert.pem $CERT_DIR/chain.pem 2>/dev/null || true
          
          echo "✅ 인증서 업데이트 완료: $(date)"
          
          # TODO: 여기에 OCI CLI를 사용해 로드 밸런서 인증서를 업데이트하는 로직 추가
          # oci lb certificate update --load-balancer-id <LB_ID> --certificate-name junhyung-xyz ...
          
      else
          echo "❌ 새로운 인증서를 찾을 수 없습니다."
      fi

  # 인스턴스 초기 설정을 위한 통합 스크립트
  - path: /usr/local/sbin/initial-setup.sh
    permissions: '0755'
    owner: root:root
    content: |
      #!/bin/bash
      set -e # 오류 발생 시 스크립트 중단
      
      echo "--- 🧱 블록 볼륨 마운트 시작 ---"
      BLOCK_DEVICE="/dev/oracleoci/oraclevdb"
      timeout=300
      while [ $timeout -gt 0 ] && [ ! -b "$BLOCK_DEVICE" ]; do
        echo "Waiting for block volume $BLOCK_DEVICE..."
        sleep 5
        timeout=$((timeout-5))
      done
      
      if [ -b "$BLOCK_DEVICE" ]; then
        if ! blkid "$BLOCK_DEVICE" | grep -q TYPE; then
          echo "Creating filesystem on $BLOCK_DEVICE"
          mkfs.ext4 "$BLOCK_DEVICE"
        fi
        mkdir -p /data
        mount "$BLOCK_DEVICE" /data
        chown ubuntu:ubuntu /data
        UUID=$(blkid -s UUID -o value "$BLOCK_DEVICE")
        if [ -n "$UUID" ] && ! grep -q "$UUID" /etc/fstab; then
          echo "UUID=$UUID /data ext4 defaults,noatime 0 2" >> /etc/fstab
        fi
        echo "✅ 블록 볼륨이 /data 에 성공적으로 마운트되었습니다."
      else
        echo "⚠️ 블록 볼륨($BLOCK_DEVICE)을 찾을 수 없습니다."
      fi
      
      echo "--- 💾 스왑 파일 설정 시작 ---"
      if ! swapon --show | grep -q '/swapfile'; then
        fallocate -l 2G /swapfile || dd if=/dev/zero of=/swapfile bs=1M count=2048
        chmod 600 /swapfile
        mkswap /swapfile
        swapon /swapfile
        echo '/swapfile none swap sw 0 0' >> /etc/fstab
        sysctl -w vm.swappiness=10
        echo "vm.swappiness=10" >> /etc/sysctl.conf
        echo "✅ 2GiB 스왑 파일이 활성화되었습니다."
      else
        echo "✅ 스왑 파일이 이미 존재합니다."
      fi
      
      echo "--- ⚙️ 시스템 커널 파라미터 최적화 시작 ---"
      if ! grep -q "net.core.somaxconn" /etc/sysctl.conf; then
        echo 'net.core.somaxconn = 65535' >> /etc/sysctl.conf
        echo 'net.ipv4.tcp_max_syn_backlog = 65535' >> /etc/sysctl.conf
        sysctl -p
        echo "✅ 시스템 커널 파라미터가 적용되었습니다."
      else
        echo "✅ 시스템 커널 파라미터가 이미 설정되었습니다."
      fi

# 4. 실행 명령어
runcmd:
  # Docker 설정
  - systemctl enable --now docker
  - usermod -aG docker ubuntu

  # OCI CLI 설치
  - pip install oci-cli --break-system-packages

  # Docker Compose 최신 버전 설치
  - |
    set -e
    echo "⬇️ Installing latest Docker Compose..."
    DOCKER_PLUGIN_DIR="/usr/local/lib/docker/cli-plugins"
    mkdir -p "$DOCKER_PLUGIN_DIR"
    COMPOSE_URL="https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s | tr '[:upper:]' '[:lower:]')-$(uname -m)"
    curl -SL "$COMPOSE_URL" -o "$DOCKER_PLUGIN_DIR/docker-compose"
    chmod +x "$DOCKER_PLUGIN_DIR/docker-compose"
    echo "✅ Docker Compose installed: $(docker compose version)"

  # 생성한 통합 설정 스크립트 실행
  - /usr/local/sbin/initial-setup.sh

  # 애플리케이션 기본 디렉터리 생성
  - mkdir -p /opt/chat-service
  - mkdir -p /opt/chat-service/webroot
  - chown -R ubuntu:ubuntu /opt/chat-service

  # 인스턴스 OS 방화벽에 3000/tcp 허용 및 영구 저장 (최소 추가)
  - |
    set -e
    iptables -C INPUT -p tcp --dport 3000 -j ACCEPT || iptables -I INPUT -p tcp --dport 3000 -j ACCEPT
    if ! command -v netfilter-persistent >/dev/null 2>&1; then
      apt-get update -y
      DEBIAN_FRONTEND=noninteractive apt-get install -y iptables-persistent netfilter-persistent
    fi
    netfilter-persistent save

  # Let's Encrypt 인증서 발급 (백그라운드로 실행, 5분 후)
  - |
    set -e
    echo "⏰ Let's Encrypt 설정을 5분 후에 백그라운드로 실행합니다..."
    (sleep 300 && /usr/local/sbin/setup-letsencrypt.sh > /var/log/letsencrypt-setup.log 2>&1) &
    echo "📋 진행 상황은 'tail -f /var/log/letsencrypt-setup.log' 로 확인할 수 있습니다."

# 5. 최종 메시지
final_message: |
  🎉 Cloud-init setup completed for ${project_name} ${environment} server.

  ✅ 설치된 구성 요소:
  ▸ Docker & Docker Compose v2 설치 완료
  ▸ OCI CLI 설치 완료 (Container Registry 인증용)
  ▸ 2 GiB 스왑 파일 활성화
  ▸ 추가 블록 볼륨 /data 마운트
  ▸ 기본 디렉터리: /opt/chat-service

  🚀 배포 절차:
  1) Container Registry 로그인:
     sudo -u ubuntu /home/ubuntu/docker-login.sh ap-chuncheon-1 <tenancy-namespace> <username> <auth-token>
  
  2) 애플리케이션 배포:
     cd /opt/chat-service
     # docker-compose.yml 파일 준비 후
     docker compose up -d
  
  3) 헬스체크:
     curl http://localhost:3000/healthz
  
  🔒 Let's Encrypt 인증서:
  ▸ 인스턴스 시작 5분 후 자동 발급 시작
  ▸ 진행 상황 확인: tail -f /var/log/letsencrypt-setup.log
  ▸ 인증서 위치: /opt/letsencrypt/
  ▸ 자동 갱신: 매주 일요일 오전 2시
  
  📁 주요 디렉터리:
  ▸ /opt/chat-service - 애플리케이션 코드
  ▸ /data - 영구 데이터 저장소 (50GB 블록 볼륨)
  ▸ /opt/letsencrypt - Let's Encrypt 인증서
  ▸ /home/ubuntu/docker-login.sh - Container Registry 로그인 스크립트
